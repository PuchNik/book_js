-Функция состоит из выражения, начинающегося с ключевого слова function. Каждая функция
имеет набор параметров (в данном случае только х) и тело, состоящее из инструкций,
которые должны выполняться при вызове функции.
-----------------------------------------------------------------------------------------------------------------------

ОБЛАСТЬ ВИДИМОСТИ (ЛОКАЛЬНЫЕ И ГЛОБАЛЬНЫЕ ПЕРЕМЕННЫЕ)
-Область видимости - это часть программы,в которой видна определенная переменная.

-Глобальные переменные - переменные, объявленные вне любых функций или блоков кода, делая
их доступными для использования в любом месте вашего кода.

-Локальные переменные - объявленные только в текущей области видимости.

-Лексическая область видимости:

    Текст касается концепции лексической области видимости в языке программирования JavaScript.
Область видимости определяет контекст, в котором переменные и выражения доступны для
использования.

    В JavaScript есть два основных типа области видимости:
1. Глобальная область видимости: Переменные объявленные вне любой функции являются глобальными.
Такие переменные доступны и видимы в любом месте вашей программы.

2. Локальная область видимости: Переменные объявленные внутри функций или блоков
(если используется let или const) имеют локальную область видимости. Доступ к этим переменным
ограничен местом их объявления и вложенными областями.

    Таким образом, когда текст говорит, что "каждая локальная область видимости также видит все
локальные области, которые ее содержат", имеется в виду, что функции в JavaScript образуют
своеобразную иерархию — лексическую область видимости, где внутренние функции имеют
доступ к переменным из внешних функций, в которые они вложены.
    А фраза "и все области видят глобальную область" означает, что переменные, объявленные в
глобальной области видимости, доступны из любых других локальных областей.
-----------------------------------------------------------------------------------------------------------------------

ВИДЫ ФУНКЦИЙ:

Function Declaration:
    В JavaScript существуют два основных способа определения функций: объявление функции
(Function Declaration) и функциональное выражение (Function Expression).
### Function Declaration (Объявление функции)
Объявление функции состоит из ключевого слова function, за которым следует имя функции,
список параметров в круглых скобках, разделенных запятыми, и тело функции, заключенное в
фигурные скобки.

Особенности Function Declaration:
    Она может быть вызвана до ее объявления в коде, благодаря тому, что интерпретатор JavaScript
делает "hoisting" (подъем) объявлений функций наверх их области видимости перед выполнением кода.
Функции, объявленные таким образом, видны во всей области, в которой они были определены.

Function Expression: (Функциональное выражение)
    При использовании функционального выражения функция может быть создана и присвоена переменной,
и такое выражение имеет вид присваивания (=).

Особенности Function Expression:
- Оно не предоставляет возможности вызова функции до ее определения в коде из-за отсутствия
"hoisting".
- Функциональное выражение может быть анонимным (как в примере выше) или именованным, что
позволяет рекурсивные вызовы внутри самой функции.
- Функциональные выражения можно использовать в качестве немедленно вызываемых функциональных
выражений (IIFE - Immediately Invoked Function Expression), когда функция должна быть выполнена
сразу после определения.
-----------------------------------------------------------------------------------------------------------------------

СТЕК ВЫЗОВОВ:
    Стек вызовов в JavaScript — это структура данных, которая используется для управления выполнением
функций. В контексте JavaScript (и многих других языков программирования) он управляет порядком,
в котором функции вызываются и завершаются. Когда функция выполняется, её данные
(такие как аргументы и локальные переменные) и контекст помещаются в новый блок в стеке вызовов.
Этот блок также называется кадром стека или контекстом выполнения.

Принцип работы стека вызовов:
1. Когда функция вызывается, создается новый контекст выполнения для этой функции и добавляется на
вершину стека.
2. Функции, вызванные внутри другой функции, попадают на вершину стека и формируют новый контекст
выполнения.
3. Когда функция завершает выполнение, её контекст удаляется со стека, и управление возвращается
к контексту выполнения, который находится ниже по стеку.
-----------------------------------------------------------------------------------------------------------------------

РЕКУРСИЯ:
    Рекурсия в JavaScript, как и в других языках программирования, это процесс в котором функция вызывает саму себя в своём
теле. Это полезный способ решения задач, которые могут быть разбиты на более мелкие, однотипные задачи.

Основные принципы рекурсии:
- Базовый случай: Для предотвращения бесконечной рекурсии, должен быть базовый случай. Это условие, при котором функция
перестанет вызывать саму себя и начнет возвращать значение.
- Рекурсивный случай: Это часть функции, где происходит сам рекурсивный вызов. В этом случае функция должна обрабатывать
более простую версию задачи и вызывать себя с этими упрощенными параметрами.
-----------------------------------------------------------------------------------------------------------------------

ЗАМЫКАНИЕ:
    Замыкание в JavaScript — это функция, которая запоминает и имеет доступ к переменным и аргументам из своей лексической
области видимости, даже после того как эта функция выполняется вне своей области видимости. Замыкания возникают в тот
момент, когда функция создается в определенном контексте, и благодаря механизму замыкания она «замыкает» в себе
состояние этого контекста. Области видимости переменных и функций, установленные при объявлении, сохраняются.

    Функция замыкания может вызываться как с присвоением переменной, так и без нее. Разница в том, что вызов замыкания
через переменную сохраняет результат функции, а без переменной результат будет одним и тем же/
-----------------------------------------------------------------------------------------------------------------------



