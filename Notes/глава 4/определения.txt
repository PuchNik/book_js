- Массив в первую очередь является объектом


- Функции в объектах называются МЕТОДЫ


В JavaScript массив — это высокоуровневый объект-подобный тип данных, который используется для хранения упорядоченных
коллекций элементов. Элементами массива могут быть значения любого типа — числа, строки, объекты, другие массивы и
даже функции.

1. Гибкость размеров: В отличие от некоторых других языков программирования, в JavaScript массивы динамические.
Это означает, что их размер не фиксирован и может меняться в процессе работы программы.

2. Типизация: JavaScript является языком с динамической типизацией, следовательно, массивы могут содержать элементы
разных типов. Вы можете иметь массив, который содержит число, строку и функцию одновременно.

3. Прототип Array.prototype: Все массивы в JavaScript наследуют свои методы из Array.prototype. Это означает, что у
каждого массива есть доступ к встроенным методам, таким как push, pop, shift, unshift, map, filter, reduce и многие
другие.

4. Индексация: Элементы массива индексируются, начиная с нуля. Это означает, что первый элемент массива имеет индекс 0,
а не 1.

5. "Дырявые" массивы: Если присвоить значение элементу массива с индексом, выходящим за текущую длину массива,
JavaScript создаст "дыры" в массиве, заполнив недостающие индексы undefined значениями.

6. Методы для работы с массивами:
- Изменение оригинального массива: некоторые методы, такие как push (добавление элементов в конец массива) и splice
(удаление/замена/добавление элементов), модифицируют исходный массив.
- Неизменяемые операции: другие методы, например slice (возвращает подмассив) и concat (соединение массивов), возвращают новый массив и не изменяют исходный.

7. Длина массива: Свойство length массива отражает количество элементов в массиве. Это не всегда равно индексу
последнего элемента, потому что массив может содержать "дыры".

8. Перебор элементов: JavaScript предлагает несколько способов для итерации по элементам массива, включая циклы
for, for...of, а также методы forEach, map, filter и другие высокоуровневые функции обратного вызова
(callback functions).

9. Хранение по ссылке: Массивы в JavaScript хранятся и передаются по ссылке, что означает, что если вы присвоите массив
новой переменной и измените массив через эту переменную, исходный массив также изменится.

10. Массивоподобные объекты: В JavaScript есть объекты, похожие на массивы (например, arguments в функциях или
NodeList в DOM), которые имеют индексированные элементы и свойство length, но не все встроенные методы массивов у них
доступны. Тем не менее, эти объекты могут быть преобразованы в массивы для полноценного использования методов массивов.
------------------------------------------------------------------------------------------------------------------------

Объект в JavaScript — это коллекция связанных данных и/или функциональности, которые состоят из нуля или более пар
ключ: значение. Объекты в JavaScript могут быть использованы для хранения данных, организации кода в модули,
как "словари" для доступа к элементам по ключу и даже как основа для сложных структур данных.

1. Создание объектов: Объекты могут быть созданы с помощью фигурных скобок {}, что называется литеральной нотацией,
или через конструктор new Object().

2. Доступ к свойствам: Доступ к свойствам объекта можно получить двумя способами — через точку . или через
квадратные скобки [].

3. Вычисляемые свойства (Computed properties): Если ключ свойства объекта неизвестен на момент написания кода или это
значение переменной, то используется нотация [].

4. Прототипы: Каждый объект в JavaScript имеет "прототип". Прототип — это другой объект, от которого текущий объект
наследует методы и свойства.

5. Динамическое добавление и удаление свойств: Вы можете динамически добавлять или удалять свойства из объекта после
его создания.

6. this в методах объекта: Внутри метода объекта this ссылается на текущий объект, что позволяет вам обращаться к
другим свойствам и методам объекта.

7. Передача по ссылке: Объекты в JavaScript передаются и присваиваются по ссылке. Когда вы присваиваете существующий
объект другой переменной, вы создаёте ссылку на тот же самый объект, а не копию оригинального объекта.

8. Перечисление свойств: Можно перебирать свойства объекта с помощью циклов, таких как for...in, или используя методы
Object.keys, Object.values, Object.entries.

9. Функции-конструкторы и классы: Для создания объектов по определенным шаблонам используются функции конструкторы или,
начиная с ES6, классы.

10. Методы объектов: JavaScript предоставляет различные встроенные методы для работы с объектами, такие как
Object.assign (для копирования свойств между объектами), Object.create (создание объекта с определённым прототипом)
и другие.
------------------------------------------------------------------------------------------------------------------------

СПИСОК БАЗОВЫХ ОПЕРАТОРОВ

1. . (точка) - Оператор точки используется для доступа к свойствам объекта.

2. [] (квадратные скобки) - Используются для доступа к свойствам объекта, особенно когда имя свойства динамично или
содержит символы, которые не могут быть использованы в идентификаторах.

3. delete - Удаляет свойство из объекта.

4. Object.assign() - Копирует значения всех перечислимых собственных свойств из одного или более исходных объектов
в целевой объект.

5. Object.create() - Создаёт новый объект с указанным прототипом и свойствами.

6. Object.keys() - Возвращает массив из собственных перечислимых свойств переданного объекта, в том же порядке, в
котором они обычно перебираются циклом for...in.

7. Object.values() - Возвращает массив значений собственных перечислимых свойств переданного объекта

8. Object.entries() - Возвращает массив собственных перечислимых свойств переданного объекта в форме [key, value].

9. Object.freeze() - Замораживает объект: другой код не может удалять или добавлять свойства к этому объекту, делать
существующие свойства неконфигурируемыми.

10. Object.seal() - Запечатывает объект, предотвращая добавление новых свойств и делая все существующие
свойства неконфигурируемыми.

11. Object.defineProperty() - Добавляет новое свойство к объекту или изменяет атрибуты существующего свойства.

12. Object.defineProperties() - Добавляет или изменяет атрибуты для нескольких свойств объекта.

13. Object.hasOwnProperty() - Возвращает булево значение, указывающее, содержит ли объект указанное свойство как
собственное (не унаследованное).

14. Object.is() - Сравнивает два значения на предмет равенства. Работает похоже на строгое сравнение ===, но
правильно обрабатывает NaN.

15. Object.setPrototypeOf() - Устанавливает прототип объекта (то есть, внутреннее свойство [[Prototype]]).
------------------------------------------------------------------------------------------------------------------------


- Корреляция - ключевой термин в сфере анализа данных, который описывает степень связи между переменными и позволяет
понять, как одна величина изменяется при изменении другой

1) Через Ссылки:
Объекты могут содержать ссылки на другие объекты. Это создает взаимосвязь между ними.

2) Через общий контекст:
Функции-методы внутри объектов могут использовать this для обращения к текущему объекту и взаимодействия с ним.
------------------------------------------------------------------------------------------------------------------------


В JavaScipt существует два вида типов данных: примитивные (неизменные) и объекты (изменяемые).
Примитивные типы данных включают в себя:
1. boolean
2. null
3. undefined
4. number
5. string
6. symbol
7. bigint

Изменяемые типы данных:
1. function
2. array
3. object
------------------------------------------------------------------------------------------------------------------------



